import numpy as np
cimport numpy as cnp

cnp.import_array()

ctypedef cnp.int64_t DTYPE_t

cpdef tuple get_hilbert_basis_hom_np(
    cnp.ndarray[DTYPE_t, ndim=2] generators,
    cnp.ndarray[DTYPE_t, ndim=2] inequalities,
    int stop_at_height=-1,
):
    """
    Compute the Hilbert basis of the cone generated by a homogenized set of generators.
    Elements at height 1 are assumed to be irreducible.
    """
    # elements at height 1 are irreducible...
    cdef cnp.ndarray[DTYPE_t, ndim=2] irreducibles = generators[generators[:, 0] == 1]

    # ... remove them from the generators
    generators = generators[generators[:, 0] > 1]


    cdef cnp.ndarray[DTYPE_t, ndim=1] x
    cdef bint is_reducible
    while generators.size > 0:
        x = generators[-1]
        generators = generators[:-1]
        is_reducible = False

        for y in irreducibles:
            if np.all(inequalities @ (x - y) >= 0):
                is_reducible = True
                break

        if is_reducible:
            continue

        for y in generators:
            if np.all(inequalities @ (x - y) >= 0):
                is_reducible = True
                break

        if is_reducible:
            continue

        irreducibles = np.vstack((irreducibles, x))
        if stop_at_height >= 0 and x[0] >= stop_at_height:
            break

    return tuple(irreducibles)


cpdef bint check_hilbert_basis_in_polytope_np(
    cnp.ndarray[DTYPE_t, ndim=2] generators,
    cnp.ndarray[DTYPE_t, ndim=2] irreducibles,
    cnp.ndarray[DTYPE_t, ndim=2] cone_inequalities,
    cnp.ndarray[DTYPE_t, ndim=2] other_inequalities,
):
    """
    Compute the Hilbert basis of the cone generated by a set of generators.
    """
    cdef cnp.ndarray[DTYPE_t, ndim=1] x
    cdef bint is_reducible
    while generators.size > 0:
        x = generators[-1]
        generators = generators[:-1]
        is_reducible = False

        for y in irreducibles:
            if np.all(cone_inequalities @ (x - y) >= 0):
                is_reducible = True
                break

        if is_reducible:
            continue

        for y in generators:
            if np.all(cone_inequalities @ (x - y) >= 0):
                is_reducible = True
                break

        if is_reducible:
            continue

        # x is irreducible
        if np.any(other_inequalities[:,1:] @ x < -other_inequalities[:,0]):
            return False
        irreducibles = np.vstack((irreducibles, x))

    return True