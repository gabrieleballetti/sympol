import numpy as np
cimport numpy as cnp

cnp.import_array()

ctypedef cnp.int64_t DTYPE_t

cpdef tuple get_hilbert_basis_np(
    cnp.ndarray[DTYPE_t, ndim=2] generators,
    cnp.ndarray[DTYPE_t, ndim=2] inequalities,
    int stop_at_height=-1,

):
    """
    Compute the Hilbert basis of the cone generated by the generators.
    """
    # elements at height 1 are irreducible... #TODO: check this
    cdef cnp.ndarray[DTYPE_t, ndim=2]irreducibles = generators[generators[:, 0] == 1]

    # ... remove them from the generators
    generators = generators[generators[:, 0] > 1]

    cdef cnp.ndarray[DTYPE_t, ndim=1] x
    cdef bint is_reducible
    while generators.size > 0:
        x = generators[-1]
        generators = generators[:-1]
        is_reducible = False

        for y in irreducibles:
            if np.all(inequalities @ (x - y) >= 0):
                is_reducible = True
                break

        if is_reducible:
            continue

        for y in generators:
            if np.all(inequalities @ (x - y) >= 0):
                is_reducible = True
                break

        if is_reducible:
            continue

        irreducibles = np.vstack((irreducibles, x))
        if stop_at_height >= 0 and x[0] >= stop_at_height:
            break

    return tuple(irreducibles)
